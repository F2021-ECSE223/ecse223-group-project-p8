Constraint 1:
For each ClimbingSeason:
	self.endDate.isAfter(self.startDate)

Constraint 2:
For each Bundle:
	There exists e1, e2 in equipmentInBundle such that type of e1 <> type of e2.

Constraint 3:
When boolean hired guide is true, a percentage discount should be offered to the member who hired the guide.

Constraint 4: 
A mountain guide cannot be assigned to more than one member in a specific week.

Constraint 5:
Each year, there are only a few weeks which allow for safe climbing in the Neptan mountains.
-> Members can only climb during climbing season.

Constraint 6:
All climbing weeks must be within the climbing season.

Constraint 7:
Bundles can be rented with a percentage discount if a mountain guide is also hired. // same thing as constraint 3

Constraint 8:
Member cannot stay at a hotel outside (before/after) their mountain climb stay.

Constraint 9:
At some point before the start of the climbing season, the administrator initiates the assignment of guides, climbing weeks, 
and hotels to members, so that the total costs for guide and equipment can be shown to the member.
(not sure about this one, but its prob something with a boolean?:D)
	
Constraint 10: (if we decide not to make stars enum) 
For each Assignment:
	âˆ€ a1 in assignedHotel it is true that a1.stars<=5 and (a1.stars>=1)
	
Constraint 11:
The number of climbing weeks cannot be greater than the number of weeks in the entire climbing season.
For each ClimbingSeason:
	size of climbingWeek <= lengthOfSeason (derived from start and end date)

Constraint 12: Function to calculate the totalCost 
For each Member:
        totalCost(): Integer 
